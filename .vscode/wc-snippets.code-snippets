{
	// Place your web-components workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Component Skeleton": {
		"scope": "typescript",
		"prefix": "wc-skeleton",
		"description": "A simple skeleton code for new web-components",
		"body": [
			"// utils ",
			"import { html, property } from \"@circular-tools/utils\";",
			"",
			"// templates",
			"import { BaseTemplate } from \"@circular-templates/base\";",
			"",
			"import { style } from \"./style\";",
			"",
			"export class $1 extends BaseTemplate {",
			"  static style = style;",
			"",
			"  @property() foo: string = \"bar\";",
			"",
			"  // class functions",
			"  connectedCallback() {",
			"    super.connectedCallback();",
			"  }",
			"  firstUpdate() {",
			"    this.callAfterUpdate.push({ callback: this.dosomething, args: [\"hello world\", 33] })",
			"  }",
			"",
			"  // event handlers",
			"  private handleclick = () => {",
			"    console.log(\"clicked\");",
			"  }",
			"",
			"  // private functions",
			"  private dosomething(arg1:string, arg2:number) {",
			"    console.log('im called after update -', arg1, arg2); // \"im called after update - hello world 33\"",
			"  }",
			"",
			"  render() {",
			"    return html`",
			"      <slot name=\"header\"></slot>",
			"      <slot></slot>",
			"    `",
			"  }",
			"}"
		]
	}
}