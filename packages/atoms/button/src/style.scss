@function get-state-set($map, $variant, $state, $color-name) {
    $default-color: map-get($map, 'default') or $color-name;
    $variant-map: map-get($map, $variant) or ();

    $state-map: map-get($variant-map, $state) or ();

    $state-trail: "";

    @if $state != "normal" {
        $state-trail: "-#{$state}";
    }

    $output: ();

    @if $variant == "outlined" and $state == "normal" {
        $output: map-merge($output, (
            border: map-get($state-map, "border") or "border-#{$default-color}#{$state-trail}",
        ));
    }
    
    @if ($variant == "clear" or $variant == "outlined") and $state == "normal" {
        $output: map-merge($output, (
            text: map-get($state-map, "text") or "text-#{$default-color}#{$state-trail}",
            icon: map-get($state-map, "icon") or "icon-#{$default-color}#{$state-trail}",
        ));
    }
    @else {
        $output: map-merge($output, (
            text: map-get($state-map, "text") or "text-on#{$default-color}#{$state-trail}",
            icon: map-get($state-map, "icon") or "icon-on#{$default-color}#{$state-trail}",
            background: map-get($state-map, "background") or "bg-#{$default-color}#{$state-trail}",
        ));
    }
        
    @return $output;
}
@mixin set-color($color-name, $color-map: ()) {
    @each $variant in (filled, outlined, clear) {
        @each $state in (normal, hover, pressed) {
            $map: get-state-set($color-map, $variant, $state, $color-name);

            $text: map-get($map, "text");
            $background: map-get($map, "background");
            $icon: map-get($map, "icon");
            $border: map-get($map, "border");
        
            $pointer-state: "";
            $state-name: $state;
            @if $state == "hover" {
                $pointer-state: ":hover"
            }
            @else if $state == "pressed" {
                $pointer-state: ":active"
            }
            @else {
                $state-name: "default";
            }
        
            :host([variant="#{$variant}"][color="#{$color-name}"]:not([disabled]).#{$state-name}),
            :host([variant="#{$variant}"][color="#{$color-name}"]:not([disabled])#{$pointer-state}) {
                @if $border {
                    border-color: var(--o-button-#{$color-name}-#{$variant}-#{$state-name}-border, var(--o-color-#{$border}));
                }
                @if $background {
                    border-color: transparent;
                    background-color: var(--o-button-#{$color-name}-#{$variant}-#{$state-name}-background, var(--o-color-#{$background}));
                }
            
                color: var(--o-button-#{$color-name}-#{$variant}-#{$state-name}-text, var(--o-color-#{$text}));
            }
            :host([variant="#{$variant}"][color="#{$color-name}"]:not([disabled]).#{$state-name}) ::slotted(o-icon),
            :host([variant="#{$variant}"][color="#{$color-name}"]:not([disabled])#{$pointer-state}) ::slotted(o-icon) {
                color: var(--o-button-#{$color-name}-#{$variant}-#{$state-name}-icon, var(--o-color-#{$icon}));
            }

            :host([variant="#{$variant}"][color="#{$color-name}"][loading="true"]:not([disabled]).#{$state-name}),
            :host([variant="#{$variant}"][color="#{$color-name}"][loading="true"]:not([disabled])#{$pointer-state}) {
                &::after {
                    border-top: 2px solid var(--o-button-#{$color-name}-#{$variant}-#{$state-name}-icon, var(--o-color-#{$icon}));
                }
            }
        }
    }
}

:host {
    cursor: var(--o-button-cursor, pointer);
    align-items: center;

    justify-content: space-evenly;

    box-sizing: border-box;
    position: relative;

    -webkit-user-select: none; /* Safari */
    -ms-user-select: none; /* IE 10 and IE 11 */
    user-select: none; /* Standard syntax */

    border-style: solid;
    border-width: 2px;
    border-color: transparent;

    transition: background-color ease-in 80ms;
}
span.content {
    padding-inline: var(--padding-small);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
}
:host([variant="outlined"]:is(:active)),
:host([variant="outlined"]:is(:hover)) {
    border-color: transparent !important;
}
:host([mode="hug"]) {
    display: inline-flex;
}
:host([mode="fill"]) {
    display: flex;
    width: 100%;
}
:host([textvariant="B1"]),
:host([textvariant="button1"]) {
    font-family: var(--typography-b1-fontfamily);
    font-size: var(--typography-b1-fontsize);
    font-weight: var(--typography-b1-fontweight);
    line-height: var(--typography-b1-lineheight);
    letter-spacing: var(--typography-b1-letterspacing);
}
:host([color="secondary"][variant="clear"]:not([textvariant="B1"]):not([textvariant="button1"])),
:host([color="inverse"][variant="clear"]:not([textvariant="B1"]):not([textvariant="button1"])),
:host([textvariant="B2"]),
:host([textvariant="button2"]) {
    font-family: var(--typography-b2-fontfamily);
    font-size: var(--typography-b2-fontsize);
    font-weight: var(--typography-b2-fontweight);
    line-height: var(--typography-b2-lineheight);
    letter-spacing: var(--typography-b2-letterspacing);
    text-decoration: underline;
}

@include set-color("primary", (
    default: "brand",
    clear: (
        hover: (
            background: 'bg-hover',
            icon: 'icon-brand-hover',
            text: 'text-brand-hover',
        ),
        pressed: (
            background: 'bg-pressed',
            icon: 'icon-brand-pressed',
            text: 'text-brand-pressed',
        )
    )
));
@include set-color("secondary", (
    default: "inverse",
    outlined: (
        normal: (
            text: 'text',
            icon: 'icon',
        )
    ),
    clear: (
        normal: (
            text: 'text',
            icon: 'icon',
        ),
        hover: (
            background: 'bg-hover',
            text: 'text',
            icon: 'icon',
        ),
        pressed: (
            background: 'bg-pressed',
            text: 'text',
            icon: 'icon',
        )
    )
));
@include set-color("inverse", (
    filled: (
        normal: (
            background: 'bg',
            text: 'text',
            icon: 'icon',
        ),
        hover: (
            background: 'bg-hover',
            text: 'text',
            icon: 'icon',
        ),
        pressed: (
            background: 'bg-pressed',
            text: 'text',
            icon: 'icon',
        )
    ),
    outlined: (
        normal: (
            border: 'border-inverse-strong',
        ),
        hover: (
            background: 'bg-hover',
            text: 'text',
            icon: 'icon',
        ),
        pressed: (
            background: 'bg-pressed',
            text: 'text',
            icon: 'icon',
        )
    ),
));
@include set-color("danger");
@include set-color("success");
@include set-color("warning");

:host([disabled]) {
    cursor: var(--o-button-cursor-disabled, not-allowed);
    color: var(--o-button-disabled-text, var(--o-color-text-disabled));
}
:host([disabled]) ::slotted(o-icon) {
    color: var(--o-button-icon-disabled, var(--o-color-icon-disabled));
}
:host([variant="filled"][disabled]) {
    background-color: var(--o-button-disabled-filled-background, var(--o-color-bg-disabled));
}
:host([variant="outlined"][disabled]) {
    border-color: var(--o-button-disabled-outlined-border, var(--o-color-border-disabled)) !important;
}

:host(.focus),
:host(:focus-visible) {
    outline-offset: 2px;
    outline: 2px solid var(--o-color-border-strong) !important;
}
:host([disabled]:focus),
:host([disabled].focus),
:host([disabled]:focus-visible),
:host([disabled]:focus-within) {
    outline: none !important;
}

:host([loading="true"]) {
    &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: var(--field-size-smaller);
        height: var(--field-size-smaller);

        border-radius: 50%;
        display: inline-block;
        border-right: 2px solid transparent;
        box-sizing: border-box;

        animation: spin 1s linear infinite; /* This line sets up the animation */
    }

    span.content,
    ::slotted(*) {
        display: none !important;
    }
}
:host([loading="true"][mode="hug"]) {
    width: 110px;
}

$size-map: (
    small: (
        min-width: 4.5rem,
        height: 2rem, // border
    ),
    medium: (
        min-width: 5.625rem,
        height: 2.5rem,
    ),
    large: (
        min-width: 6.75rem,
        height: 3rem,
    ),
);

@each $name, $value in $size-map {
    :host([size="#{$name}"]) {
        min-height: var(--o-button-height-#{$name}, #{map-get($value, height)});
        height: fit-content;
    }
    :host([size="#{$name}"]:not([circle="true"])) {
        min-width: var(--o-button-min-width-#{$name}, #{map-get($value, min-width)});
    }
    ::slotted(*[slot="prefix"]) {
        margin-left: var(--margin-smaller);
    }
    ::slotted(*[slot="suffix"]) {
        margin-right: var(--margin-smaller);
    }
    :host([circle="true"][size="#{$name}"]) {
        padding: 0;
        min-width: auto !important;
        justify-content: center;
        width: var(--o-button-width-#{$name}, #{map-get($value, height)});
    }
}

@keyframes spin {
    0% {
        transform: translate(-50%, -50%) rotate(0deg);
    }
    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}